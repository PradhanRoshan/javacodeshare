Multi Threading
===============
- Thread class
- Runnable interface 

Program 1: Create a custom thread and call a method using that thread. 


public class App {
	public static void main(String[] args) {
		 A a=new A(); 
		 Thread t1 = new Thread(a, "MyThread-1"); 
		 t1.start(); 
		  
	}
}
//start() --> run() --> display() -- MyThread-1
class A extends Thread{
	
	@Override
	public void run() {
		display(); 
	}
	
	void display() {
		System.out.println(Thread.currentThread().getName());
	}
}

/*
	JVM starts a thread(main thread). 
*/


Program 2: Create a thread using Runnable Interface. Create Multiple threads and demonstrate concurrent execution of threads. 
[sequence is undecided]


public class App {
	public static void main(String[] args) {
		 Thread t1=new Thread(new A(),"MyTh-1"); 
		 Thread t2 = new Thread(new A(),"MyTh-2");
		 
		 t1.start(); //MyTh-1
		 t2.start(); //MyTh-2
		  
	}
} 

class A implements Runnable{

	@Override
	public void run() {
		doStuff(); 
	}
	
	private void doStuff(){
		System.out.println(Thread.currentThread().getName());
	}
	
}


Program 3: 
Working with Methods 


public class App {
	public static void main(String[] args) throws InterruptedException{
		 Thread t1 = new Thread(new A(),"T1");
		 Thread t2 = new Thread(new A(),"T2"); 
		 System.out.println(t1.isAlive()); //false
		 t1.start();
		 t2.start();
		 System.out.println(t1.isAlive());//true
		 t1.join();
		 t2.join(); 
		 System.out.println("Done! thank you!!");
	}
} 
class A  extends Thread{

	public void run() {
		doStuff();
	}
	
	private void doStuff(){
		System.out.println(Thread.currentThread().getName()); //T1 T2
		try {
			Thread.sleep(1000); // T1 T2
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println(Thread.currentThread().getName()); //T1 T2
	}

}


Program 4: synchronization
- synchronization means, One thread waits until the other thread finishes execution on a shared resource. 

ex. 
public class App {
	public static void main(String[] args) throws InterruptedException{
		 A a=new A(); //100X
		 Thread t1 = new Thread(a,"T1");
		 Thread t2 = new Thread(a,"T2"); 
		 t1.start();
		 t2.start();
		 
		 t1.join();
		 t2.join();
		 System.out.println(a.getCount());
	}
} 
class A  extends Thread{
	int count= 0;
	String str="";
	public void run() {
		doStuff();
	}
	
	private void doStuff(){
		synchronized (str) {
			for(int i=0;i<5000000;i++) {
				 count++;
			 }
		}	 
	}
	
	public int getCount() {
		return count; 
	}
	
}


Program 5: Deadlock with wait-notify

package com.main;

class A extends Thread{
	String str="";
	public void run() {
		doStuff();
	}
	
	private void doStuff() {
		synchronized (str) {
			try {
				System.out.println(Thread.currentThread().getName()); //T1 T2
				str.notifyAll();
				str.wait();	//T1
				System.out.println(Thread.currentThread().getName() + " completes");
				str.notifyAll();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}
/*
 * notify() 
 * notifyAll()
 */
public class App {
	public static void main(String[] args) throws InterruptedException{
		 A a=new A(); //100X
		 Thread t1 = new Thread(a,"T1");
		 Thread t2 = new Thread(a,"T2"); 
		 t1.start();
		 t2.start();
		 
		  
	}
}  
 





























